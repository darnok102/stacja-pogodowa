#include <SD.h>
#include <SFE_BMP180.h>
#include <Wire.h>

File myFile;

SFE_BMP180 pressure;

void setup()
{
  Serial.begin(9600);
  Serial.println("REBOOT");
  
  //SD
  // Open serial communications and wait for port to open:  
   
  while (!Serial) {
    ; // wait for serial port to connect
  }
  Serial.print("Initializing SD card...");

  if (!SD.begin(4)) {
    Serial.println("initialization failed!");
    while (1);
  }
  Serial.println("initialization done.");

/*  
    //delate old code
    myFile = SD.open("test.txt", FILE_WRITE);
    Serial.println("Removing test.txt...");
    SD.remove("test.txt");

    if (SD.exists("test.txt")){ 
       Serial.println("test.txt exists.");
    }
    else {
       Serial.println("test.txt doesn't exist.");  
    }
*/

  myFile = SD.open("test.txt", FILE_WRITE);   // open the file. note that only one file can be open at a time,
  Serial.print("Writing to test.txt...\n");   // so you have to close this one before opening another.
   
 
  if (pressure.begin())                       // Initialize the sensor (it is important to get calibration values stored on the device).
    Serial.println("BMP180 unit success");
  else
  {        
    Serial.println("BMP180 init fail\n\n");   // Oops, something went wrong, this is usually a connection problem,
    while(1); // Pause forever.
  }
  
  myFile = SD.open("test.txt", FILE_WRITE);
  if (myFile) {
    myFile.println("\n");
    myFile.println("temperature      pressure");
    myFile.println("[deg C]          [hPa]");
    myFile.close();
    Serial.println("done.");
  }
}

void loop()
{
  char status;
  double T,P;

  status = pressure.startTemperature();
  if (status != 0)
  {
    // Wait for the measurement to complete:
    delay(status);

    // Retrieve the completed temperature measurement:
    // Note that the measurement is stored in the variable T.
    // Function returns 1 if successful, 0 if failure.

    status = pressure.getTemperature(T);
    if (status != 0)
    {      
      // The parameter is the oversampling setting, from 0 to 3 (highest res, longest wait).
      // If request is successful, the number of ms to wait is returned.
      // If request is unsuccessful, 0 is returned.

      status = pressure.startPressure(3);
      if (status != 0)
      {
        // Wait for the measurement to complete:
        delay(status);

        status = pressure.getPressure(P,T);
        if (status != 0)
        {
              myFile = SD.open("test.txt", FILE_WRITE);       // Print out the measurement:              
              if (myFile) {
                myFile.print(T);
                myFile.print(",    ");
                myFile.println(P);
                myFile.close();                
              }    
                Serial.println("done."); 
        }
        else Serial.println("error retrieving pressure measurement\n");
      }
      else Serial.println("error starting pressure measurement\n");
    }
    else Serial.println("error retrieving temperature measurement\n");
  }
  else Serial.println("error starting temperature measurement\n");

  delay(3600000);                                             // Pause for 1h (1h->60min->3 600s->3 600 000ms)   
}
